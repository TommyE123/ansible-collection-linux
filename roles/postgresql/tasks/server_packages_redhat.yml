---

# DEBUG SECTION
- name: "server packages redhat | (debug) Required postgresql rpm repo URL to check"
  ansible.builtin.debug:
    msg: "{{ postgresql_packages[1].package }}"
  when: postgresql_version is defined and postgresql_version is not none and postgresql_version | string | length > 0

- name: "server packages redhat | Check required postgresql rpm repo is available"
  ansible.builtin.uri:
    url: "{{ postgresql_packages[1].package }}"
    validate_certs: "{{ ansible_python_version is version('2.7.5', '>=') }}"
  register: check_postgresql_repo_url_results
  ignore_errors: True
  failed_when: check_postgresql_repo_url_results.status == 404
  when: postgresql_version is defined and postgresql_version is not none and postgresql_version | string | length > 0

- name: "server packages redhat | Check required postgresql version URL is available"
  ansible.builtin.uri:
    url: >-
      {{ postgresql_url }}repos/yum/{{ postgresql_version }}/{% if ansible_distribution == 'Fedora' -%}
      fedora/fedora-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/{% else -%}
      redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/{% endif %}
    validate_certs: "{{ ansible_python_version is version('2.7.5', '>=') }}"
  register: check_postgresql_version_url_results
  ignore_errors: True
  failed_when: check_postgresql_version_url_results.status == 404
  when: postgresql_version is defined and postgresql_version is not none and postgresql_version | string | length > 0

# DEBUG SECTION
- name: "server packages redhat | (debug) Show check_postgresql_repo_url_results"
  ansible.builtin.debug:
    var: check_postgresql_repo_url_results

- name: "server packages redhat | Set facts of disable/enable yum repos and version regex for non-versioned install"
  ansible.builtin.set_fact:
    postgresql_disable_repo: >-
      {% if (postgresql_repo_settings | json_query(ansible_os_family | lower + ansible_distribution_major_version))
      is not none %}'*'{% endif -%}
    postgresql_enable_repo: >-
      {{ postgresql_repo_settings | json_query(ansible_os_family | lower + ansible_distribution_major_version) |
      default('') -}}
    postgresql_version_regex: >-
      {% if (check_postgresql_repo_url_results is defined and check_postgresql_repo_url_results.failed) or
      (check_postgresql_version_url_results is defined and check_postgresql_version_url_results.failed) or
      postgresql_recommended_version %}{{ postgresql_version | default('') }}{% endif %}

# DEBUG SECTION
- name: "server packages redhat | (debug) Show required version URL of postgresql is available to download"
  ansible.builtin.debug:
    msg: >-
      {{ postgresql_url }}repos/yum/{{ postgresql_version }}/{% if ansible_distribution == 'Fedora' -%}
      fedora/fedora-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/{% else -%}
      redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/{% endif %}
      Regex: {{ postgresql_version_regex }}

- name: "server packages redhat | Get postgresql dnf postgresql modules list"   # noqa risky-shell-pipe
  ansible.builtin.shell: dnf -qy module list | grep 'postgresql' || true
  register: dnf_postgresql_module_results
  changed_when: False
  when: ansible_pkg_mgr == 'dnf'

- name: "server packages redhat | Set fact of main packages list and daemon name"
  ansible.builtin.set_fact:
    packages_to_install:
      - "{{ postgresql_packages[0] }}"
      - { package: "{% if check_postgresql_repo_url_results is defined and
          not check_postgresql_repo_url_results.failed %}{{ postgresql_packages[1].package }}{% else -%}
          @postgresql{% if ansible_pkg_mgr == 'dnf' and dnf_postgresql_module_results.stdout is defined and
          dnf_postgresql_module_results.stdout | length > 0 %}/server{% endif %}{% endif %}",
          package_name_short: "{% if check_postgresql_repo_url_results is defined and
          not check_postgresql_repo_url_results.failed %}{{ postgresql_packages[1].package_name_short }}{% endif %}" }
      - "{{ postgresql_packages[2] }}"
      - { package: "{{ postgresql_packages[3].package | regex_replace(postgresql_version_regex, '') }}",
          disable_repo: "{{ postgresql_disable_repo }}", enable_repo: "{{ postgresql_enable_repo }}" }
    postgresql_daemon_name: "postgresql{% if postgresql_version_regex is defined and postgresql_version_regex |
      length == 0 %}-{{ postgresql_version }}{% endif %}"

- name: "server packages redhat | Set facts for additional postgresql packages to install"
  ansible.builtin.set_fact:
    packages_to_install: >-
      {{ packages_to_install + [{ 'package': item | regex_replace(postgresql_version_regex, ''),
      'disable_repo': postgresql_disable_repo, 'enable_repo': postgresql_enable_repo }] }}
  with_items:
    - "{{ postgresql_additional_packages }}"
